# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `usersmanager.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module UsersManager
_M_UsersManager = Ice.openModule('UsersManager')
__name__ = 'UsersManager'

if 'SessionExpired' not in _M_UsersManager.__dict__:
    _M_UsersManager.SessionExpired = Ice.createTempClass()
    class SessionExpired(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::UsersManager::SessionExpired'

    _M_UsersManager._t_SessionExpired = IcePy.defineException('::UsersManager::SessionExpired', SessionExpired, (), False, None, ())
    SessionExpired._ice_type = _M_UsersManager._t_SessionExpired

    _M_UsersManager.SessionExpired = SessionExpired
    del SessionExpired

if 'InvalidUser' not in _M_UsersManager.__dict__:
    _M_UsersManager.InvalidUser = Ice.createTempClass()
    class InvalidUser(Ice.UserException):
        def __init__(self, user=''):
            self.user = user

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::UsersManager::InvalidUser'

    _M_UsersManager._t_InvalidUser = IcePy.defineException('::UsersManager::InvalidUser', InvalidUser, (), False, None, (('user', (), IcePy._t_string, False, 0),))
    InvalidUser._ice_type = _M_UsersManager._t_InvalidUser

    _M_UsersManager.InvalidUser = InvalidUser
    del InvalidUser

if 'Unauthorized' not in _M_UsersManager.__dict__:
    _M_UsersManager.Unauthorized = Ice.createTempClass()
    class Unauthorized(Ice.UserException):
        def __init__(self, reason=''):
            self.reason = reason

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::UsersManager::Unauthorized'

    _M_UsersManager._t_Unauthorized = IcePy.defineException('::UsersManager::Unauthorized', Unauthorized, (), False, None, (('reason', (), IcePy._t_string, False, 0),))
    Unauthorized._ice_type = _M_UsersManager._t_Unauthorized

    _M_UsersManager.Unauthorized = Unauthorized
    del Unauthorized

_M_UsersManager._t_Session = IcePy.defineValue('::UsersManager::Session', Ice.Value, -1, (), False, True, None, ())

if 'SessionPrx' not in _M_UsersManager.__dict__:
    _M_UsersManager.SessionPrx = Ice.createTempClass()
    class SessionPrx(Ice.ObjectPrx):

        def getUser(self, context=None):
            return _M_UsersManager.Session._op_getUser.invoke(self, ((), context))

        def getUserAsync(self, context=None):
            return _M_UsersManager.Session._op_getUser.invokeAsync(self, ((), context))

        def begin_getUser(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.Session._op_getUser.begin(self, ((), _response, _ex, _sent, context))

        def end_getUser(self, _r):
            return _M_UsersManager.Session._op_getUser.end(self, _r)

        def isAlive(self, context=None):
            return _M_UsersManager.Session._op_isAlive.invoke(self, ((), context))

        def isAliveAsync(self, context=None):
            return _M_UsersManager.Session._op_isAlive.invokeAsync(self, ((), context))

        def begin_isAlive(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.Session._op_isAlive.begin(self, ((), _response, _ex, _sent, context))

        def end_isAlive(self, _r):
            return _M_UsersManager.Session._op_isAlive.end(self, _r)

        def refresh(self, context=None):
            return _M_UsersManager.Session._op_refresh.invoke(self, ((), context))

        def refreshAsync(self, context=None):
            return _M_UsersManager.Session._op_refresh.invokeAsync(self, ((), context))

        def begin_refresh(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.Session._op_refresh.begin(self, ((), _response, _ex, _sent, context))

        def end_refresh(self, _r):
            return _M_UsersManager.Session._op_refresh.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_UsersManager.SessionPrx.ice_checkedCast(proxy, '::UsersManager::Session', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_UsersManager.SessionPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::UsersManager::Session'
    _M_UsersManager._t_SessionPrx = IcePy.defineProxy('::UsersManager::Session', SessionPrx)

    _M_UsersManager.SessionPrx = SessionPrx
    del SessionPrx

    _M_UsersManager.Session = Ice.createTempClass()
    class Session(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::UsersManager::Session')

        def ice_id(self, current=None):
            return '::UsersManager::Session'

        @staticmethod
        def ice_staticId():
            return '::UsersManager::Session'

        def getUser(self, current=None):
            raise NotImplementedError("servant method 'getUser' not implemented")

        def isAlive(self, current=None):
            raise NotImplementedError("servant method 'isAlive' not implemented")

        def refresh(self, current=None):
            raise NotImplementedError("servant method 'refresh' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_UsersManager._t_SessionDisp)

        __repr__ = __str__

    _M_UsersManager._t_SessionDisp = IcePy.defineClass('::UsersManager::Session', Session, (), None, ())
    Session._ice_type = _M_UsersManager._t_SessionDisp

    Session._op_getUser = IcePy.Operation('getUser', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())
    Session._op_isAlive = IcePy.Operation('isAlive', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Session._op_refresh = IcePy.Operation('refresh', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, (_M_UsersManager._t_SessionExpired, _M_UsersManager._t_InvalidUser))

    _M_UsersManager.Session = Session
    del Session

_M_UsersManager._t_Manager = IcePy.defineValue('::UsersManager::Manager', Ice.Value, -1, (), False, True, None, ())

if 'ManagerPrx' not in _M_UsersManager.__dict__:
    _M_UsersManager.ManagerPrx = Ice.createTempClass()
    class ManagerPrx(Ice.ObjectPrx):

        def login(self, username, password, context=None):
            return _M_UsersManager.Manager._op_login.invoke(self, ((username, password), context))

        def loginAsync(self, username, password, context=None):
            return _M_UsersManager.Manager._op_login.invokeAsync(self, ((username, password), context))

        def begin_login(self, username, password, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.Manager._op_login.begin(self, ((username, password), _response, _ex, _sent, context))

        def end_login(self, _r):
            return _M_UsersManager.Manager._op_login.end(self, _r)

        def createUser(self, username, password, context=None):
            return _M_UsersManager.Manager._op_createUser.invoke(self, ((username, password), context))

        def createUserAsync(self, username, password, context=None):
            return _M_UsersManager.Manager._op_createUser.invokeAsync(self, ((username, password), context))

        def begin_createUser(self, username, password, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.Manager._op_createUser.begin(self, ((username, password), _response, _ex, _sent, context))

        def end_createUser(self, _r):
            return _M_UsersManager.Manager._op_createUser.end(self, _r)

        def removeUser(self, activeSession, context=None):
            return _M_UsersManager.Manager._op_removeUser.invoke(self, ((activeSession, ), context))

        def removeUserAsync(self, activeSession, context=None):
            return _M_UsersManager.Manager._op_removeUser.invokeAsync(self, ((activeSession, ), context))

        def begin_removeUser(self, activeSession, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.Manager._op_removeUser.begin(self, ((activeSession, ), _response, _ex, _sent, context))

        def end_removeUser(self, _r):
            return _M_UsersManager.Manager._op_removeUser.end(self, _r)

        def verifySession(self, session, context=None):
            return _M_UsersManager.Manager._op_verifySession.invoke(self, ((session, ), context))

        def verifySessionAsync(self, session, context=None):
            return _M_UsersManager.Manager._op_verifySession.invokeAsync(self, ((session, ), context))

        def begin_verifySession(self, session, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.Manager._op_verifySession.begin(self, ((session, ), _response, _ex, _sent, context))

        def end_verifySession(self, _r):
            return _M_UsersManager.Manager._op_verifySession.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_UsersManager.ManagerPrx.ice_checkedCast(proxy, '::UsersManager::Manager', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_UsersManager.ManagerPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::UsersManager::Manager'
    _M_UsersManager._t_ManagerPrx = IcePy.defineProxy('::UsersManager::Manager', ManagerPrx)

    _M_UsersManager.ManagerPrx = ManagerPrx
    del ManagerPrx

    _M_UsersManager.Manager = Ice.createTempClass()
    class Manager(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::UsersManager::Manager')

        def ice_id(self, current=None):
            return '::UsersManager::Manager'

        @staticmethod
        def ice_staticId():
            return '::UsersManager::Manager'

        def login(self, username, password, current=None):
            raise NotImplementedError("servant method 'login' not implemented")

        def createUser(self, username, password, current=None):
            raise NotImplementedError("servant method 'createUser' not implemented")

        def removeUser(self, activeSession, current=None):
            raise NotImplementedError("servant method 'removeUser' not implemented")

        def verifySession(self, session, current=None):
            raise NotImplementedError("servant method 'verifySession' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_UsersManager._t_ManagerDisp)

        __repr__ = __str__

    _M_UsersManager._t_ManagerDisp = IcePy.defineClass('::UsersManager::Manager', Manager, (), None, ())
    Manager._ice_type = _M_UsersManager._t_ManagerDisp

    Manager._op_login = IcePy.Operation('login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_UsersManager._t_SessionPrx, False, 0), (_M_UsersManager._t_Unauthorized,))
    Manager._op_createUser = IcePy.Operation('createUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_UsersManager._t_SessionPrx, False, 0), (_M_UsersManager._t_Unauthorized,))
    Manager._op_removeUser = IcePy.Operation('removeUser', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_UsersManager._t_SessionPrx, False, 0),), (), None, (_M_UsersManager._t_SessionExpired, _M_UsersManager._t_InvalidUser))
    Manager._op_verifySession = IcePy.Operation('verifySession', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_UsersManager._t_SessionPrx, False, 0),), (), ((), IcePy._t_bool, False, 0), ())

    _M_UsersManager.Manager = Manager
    del Manager

_M_UsersManager._t_ManagerQueryResponse = IcePy.defineValue('::UsersManager::ManagerQueryResponse', Ice.Value, -1, (), False, True, None, ())

if 'ManagerQueryResponsePrx' not in _M_UsersManager.__dict__:
    _M_UsersManager.ManagerQueryResponsePrx = Ice.createTempClass()
    class ManagerQueryResponsePrx(Ice.ObjectPrx):

        def sendSession(self, session, context=None):
            return _M_UsersManager.ManagerQueryResponse._op_sendSession.invoke(self, ((session, ), context))

        def sendSessionAsync(self, session, context=None):
            return _M_UsersManager.ManagerQueryResponse._op_sendSession.invokeAsync(self, ((session, ), context))

        def begin_sendSession(self, session, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.ManagerQueryResponse._op_sendSession.begin(self, ((session, ), _response, _ex, _sent, context))

        def end_sendSession(self, _r):
            return _M_UsersManager.ManagerQueryResponse._op_sendSession.end(self, _r)

        def userExists(self, context=None):
            return _M_UsersManager.ManagerQueryResponse._op_userExists.invoke(self, ((), context))

        def userExistsAsync(self, context=None):
            return _M_UsersManager.ManagerQueryResponse._op_userExists.invokeAsync(self, ((), context))

        def begin_userExists(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.ManagerQueryResponse._op_userExists.begin(self, ((), _response, _ex, _sent, context))

        def end_userExists(self, _r):
            return _M_UsersManager.ManagerQueryResponse._op_userExists.end(self, _r)

        def userRemoved(self, context=None):
            return _M_UsersManager.ManagerQueryResponse._op_userRemoved.invoke(self, ((), context))

        def userRemovedAsync(self, context=None):
            return _M_UsersManager.ManagerQueryResponse._op_userRemoved.invokeAsync(self, ((), context))

        def begin_userRemoved(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.ManagerQueryResponse._op_userRemoved.begin(self, ((), _response, _ex, _sent, context))

        def end_userRemoved(self, _r):
            return _M_UsersManager.ManagerQueryResponse._op_userRemoved.end(self, _r)

        def sessionVerified(self, context=None):
            return _M_UsersManager.ManagerQueryResponse._op_sessionVerified.invoke(self, ((), context))

        def sessionVerifiedAsync(self, context=None):
            return _M_UsersManager.ManagerQueryResponse._op_sessionVerified.invokeAsync(self, ((), context))

        def begin_sessionVerified(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.ManagerQueryResponse._op_sessionVerified.begin(self, ((), _response, _ex, _sent, context))

        def end_sessionVerified(self, _r):
            return _M_UsersManager.ManagerQueryResponse._op_sessionVerified.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_UsersManager.ManagerQueryResponsePrx.ice_checkedCast(proxy, '::UsersManager::ManagerQueryResponse', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_UsersManager.ManagerQueryResponsePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::UsersManager::ManagerQueryResponse'
    _M_UsersManager._t_ManagerQueryResponsePrx = IcePy.defineProxy('::UsersManager::ManagerQueryResponse', ManagerQueryResponsePrx)

    _M_UsersManager.ManagerQueryResponsePrx = ManagerQueryResponsePrx
    del ManagerQueryResponsePrx

    _M_UsersManager.ManagerQueryResponse = Ice.createTempClass()
    class ManagerQueryResponse(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::UsersManager::ManagerQueryResponse')

        def ice_id(self, current=None):
            return '::UsersManager::ManagerQueryResponse'

        @staticmethod
        def ice_staticId():
            return '::UsersManager::ManagerQueryResponse'

        def sendSession(self, session, current=None):
            raise NotImplementedError("servant method 'sendSession' not implemented")

        def userExists(self, current=None):
            raise NotImplementedError("servant method 'userExists' not implemented")

        def userRemoved(self, current=None):
            raise NotImplementedError("servant method 'userRemoved' not implemented")

        def sessionVerified(self, current=None):
            raise NotImplementedError("servant method 'sessionVerified' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_UsersManager._t_ManagerQueryResponseDisp)

        __repr__ = __str__

    _M_UsersManager._t_ManagerQueryResponseDisp = IcePy.defineClass('::UsersManager::ManagerQueryResponse', ManagerQueryResponse, (), None, ())
    ManagerQueryResponse._ice_type = _M_UsersManager._t_ManagerQueryResponseDisp

    ManagerQueryResponse._op_sendSession = IcePy.Operation('sendSession', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_UsersManager._t_SessionPrx, False, 0),), (), None, ())
    ManagerQueryResponse._op_userExists = IcePy.Operation('userExists', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    ManagerQueryResponse._op_userRemoved = IcePy.Operation('userRemoved', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())
    ManagerQueryResponse._op_sessionVerified = IcePy.Operation('sessionVerified', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_UsersManager.ManagerQueryResponse = ManagerQueryResponse
    del ManagerQueryResponse

_M_UsersManager._t_ManagerQuery = IcePy.defineValue('::UsersManager::ManagerQuery', Ice.Value, -1, (), False, True, None, ())

if 'ManagerQueryPrx' not in _M_UsersManager.__dict__:
    _M_UsersManager.ManagerQueryPrx = Ice.createTempClass()
    class ManagerQueryPrx(Ice.ObjectPrx):

        def login(self, username, password, responseRcvr, context=None):
            return _M_UsersManager.ManagerQuery._op_login.invoke(self, ((username, password, responseRcvr), context))

        def loginAsync(self, username, password, responseRcvr, context=None):
            return _M_UsersManager.ManagerQuery._op_login.invokeAsync(self, ((username, password, responseRcvr), context))

        def begin_login(self, username, password, responseRcvr, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.ManagerQuery._op_login.begin(self, ((username, password, responseRcvr), _response, _ex, _sent, context))

        def end_login(self, _r):
            return _M_UsersManager.ManagerQuery._op_login.end(self, _r)

        def checkUsername(self, username, responseRcvr, context=None):
            return _M_UsersManager.ManagerQuery._op_checkUsername.invoke(self, ((username, responseRcvr), context))

        def checkUsernameAsync(self, username, responseRcvr, context=None):
            return _M_UsersManager.ManagerQuery._op_checkUsername.invokeAsync(self, ((username, responseRcvr), context))

        def begin_checkUsername(self, username, responseRcvr, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.ManagerQuery._op_checkUsername.begin(self, ((username, responseRcvr), _response, _ex, _sent, context))

        def end_checkUsername(self, _r):
            return _M_UsersManager.ManagerQuery._op_checkUsername.end(self, _r)

        def removeUserBySession(self, activeSession, responseRcvr, context=None):
            return _M_UsersManager.ManagerQuery._op_removeUserBySession.invoke(self, ((activeSession, responseRcvr), context))

        def removeUserBySessionAsync(self, activeSession, responseRcvr, context=None):
            return _M_UsersManager.ManagerQuery._op_removeUserBySession.invokeAsync(self, ((activeSession, responseRcvr), context))

        def begin_removeUserBySession(self, activeSession, responseRcvr, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.ManagerQuery._op_removeUserBySession.begin(self, ((activeSession, responseRcvr), _response, _ex, _sent, context))

        def end_removeUserBySession(self, _r):
            return _M_UsersManager.ManagerQuery._op_removeUserBySession.end(self, _r)

        def checkSession(self, session, responseRcvr, context=None):
            return _M_UsersManager.ManagerQuery._op_checkSession.invoke(self, ((session, responseRcvr), context))

        def checkSessionAsync(self, session, responseRcvr, context=None):
            return _M_UsersManager.ManagerQuery._op_checkSession.invokeAsync(self, ((session, responseRcvr), context))

        def begin_checkSession(self, session, responseRcvr, _response=None, _ex=None, _sent=None, context=None):
            return _M_UsersManager.ManagerQuery._op_checkSession.begin(self, ((session, responseRcvr), _response, _ex, _sent, context))

        def end_checkSession(self, _r):
            return _M_UsersManager.ManagerQuery._op_checkSession.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_UsersManager.ManagerQueryPrx.ice_checkedCast(proxy, '::UsersManager::ManagerQuery', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_UsersManager.ManagerQueryPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::UsersManager::ManagerQuery'
    _M_UsersManager._t_ManagerQueryPrx = IcePy.defineProxy('::UsersManager::ManagerQuery', ManagerQueryPrx)

    _M_UsersManager.ManagerQueryPrx = ManagerQueryPrx
    del ManagerQueryPrx

    _M_UsersManager.ManagerQuery = Ice.createTempClass()
    class ManagerQuery(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::UsersManager::ManagerQuery')

        def ice_id(self, current=None):
            return '::UsersManager::ManagerQuery'

        @staticmethod
        def ice_staticId():
            return '::UsersManager::ManagerQuery'

        def login(self, username, password, responseRcvr, current=None):
            raise NotImplementedError("servant method 'login' not implemented")

        def checkUsername(self, username, responseRcvr, current=None):
            raise NotImplementedError("servant method 'checkUsername' not implemented")

        def removeUserBySession(self, activeSession, responseRcvr, current=None):
            raise NotImplementedError("servant method 'removeUserBySession' not implemented")

        def checkSession(self, session, responseRcvr, current=None):
            raise NotImplementedError("servant method 'checkSession' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_UsersManager._t_ManagerQueryDisp)

        __repr__ = __str__

    _M_UsersManager._t_ManagerQueryDisp = IcePy.defineClass('::UsersManager::ManagerQuery', ManagerQuery, (), None, ())
    ManagerQuery._ice_type = _M_UsersManager._t_ManagerQueryDisp

    ManagerQuery._op_login = IcePy.Operation('login', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0), ((), _M_UsersManager._t_ManagerQueryResponsePrx, False, 0)), (), None, ())
    ManagerQuery._op_checkUsername = IcePy.Operation('checkUsername', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), _M_UsersManager._t_ManagerQueryResponsePrx, False, 0)), (), None, ())
    ManagerQuery._op_removeUserBySession = IcePy.Operation('removeUserBySession', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_UsersManager._t_SessionPrx, False, 0), ((), _M_UsersManager._t_ManagerQueryResponsePrx, False, 0)), (), None, ())
    ManagerQuery._op_checkSession = IcePy.Operation('checkSession', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_UsersManager._t_SessionPrx, False, 0), ((), _M_UsersManager._t_ManagerQueryResponsePrx, False, 0)), (), None, ())

    _M_UsersManager.ManagerQuery = ManagerQuery
    del ManagerQuery

# End of module UsersManager
